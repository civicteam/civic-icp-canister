type u16 = nat16;
type ArgumentValue = variant { Int : int32; String : text };
type Claim = record { claims : vec record { text; ClaimValue } };
type ClaimValue = variant {
  Date : text;
  Text : text;
  Boolean : bool;
  Number : int64;
  Claim : Claim;
};
type CredentialError = variant {
  UnauthorizedSubject : text;
  NoCredentialsFound : text;
};
type CredentialSpec = record {
  arguments : opt vec record { text; ArgumentValue };
  credential_type : text;
};
type DerivationOriginData = record { origin : text };
type DerivationOriginError = variant {
  Internal : text;
  UnsupportedOrigin : text;
};
type DerivationOriginRequest = record { frontend_hostname : text };
type GetCredentialRequest = record {
  signed_id_alias : SignedIdAlias;
  prepared_context : opt blob;
  credential_spec : CredentialSpec;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
  certificate_version : opt nat16;
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  status_code : nat16;
};
type Icrc21ConsentInfo = record { consent_message : text; language : text };
type Icrc21ConsentPreferences = record { language : text };
type Icrc21Error = variant {
  GenericError : record { description : text; error_code : nat };
  UnsupportedCanisterCall : Icrc21ErrorInfo;
  ConsentMessageUnavailable : Icrc21ErrorInfo;
};
type Icrc21ErrorInfo = record { description : text };
type Icrc21VcConsentMessageRequest = record {
  preferences : Icrc21ConsentPreferences;
  credential_spec : CredentialSpec;
};
type IssueCredentialError = variant {
  Internal : text;
  SignatureNotFound : text;
  InvalidIdAlias : text;
  UnauthorizedSubject : text;
  UnknownSubject : text;
  UnsupportedCredentialSpec : text;
};
type IssuedCredentialData = record { vc_jws : text };
type IssuerInit = record {
  derivation_origin : text;
  idp_canister_ids : vec principal;
  ic_root_key_der : blob;
  frontend_hostname : text;
  admin: principal;
  authorized_issuers: vec principal;
};
type PrepareCredentialRequest = record {
  signed_id_alias : SignedIdAlias;
  credential_spec : CredentialSpec;
};
type PreparedCredentialData = record { prepared_context : opt blob };
type Result = variant { Ok : text; Err : CredentialError };
type Result_1 = variant {
  Ok : DerivationOriginData;
  Err : DerivationOriginError;
};
type Result_2 = variant { Ok : vec FullCredential; Err : CredentialError };
type Result_3 = variant {
  Ok : IssuedCredentialData;
  Err : IssueCredentialError;
};
type Result_4 = variant {
  Ok : PreparedCredentialData;
  Err : IssueCredentialError;
};
type Result_5 = variant { Ok : Icrc21ConsentInfo; Err : Icrc21Error };
type SignedIdAlias = record { credential_jws : text };
type Credential = record {
  id : text;
  context : vec text;
  type_ : vec text;
  claim : vec Claim;
};

type FullCredential = record {
  id : text;
  context : vec text;
  type_ : vec text;
  claim : vec Claim;
  issuer : text;
};
type StoredCredential = record {
  id : text;
  context_issuer_id : u16;
  type_ : vec text;
  claim : vec Claim;
};
service : (opt IssuerInit) -> {
  add_credentials : (principal, vec Credential) -> (Result);
  remove_credential : (principal, text) -> (Result);
  configure : (IssuerInit) -> ();
  derivation_origin : (DerivationOriginRequest) -> (Result_1);
  get_all_credentials : (principal) -> (Result_2) query;
  get_credential : (GetCredentialRequest) -> (Result_3) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  prepare_credential : (PrepareCredentialRequest) -> (Result_4);
  update_credential : (principal, text, Credential) -> (Result);
  vc_consent_message : (Icrc21VcConsentMessageRequest) -> (Result_5);
  get_admin : () -> (principal) query;
  add_issuer: (principal) -> ();
  remove_issuer: (principal) -> ();
}
